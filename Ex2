import hashlib
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash=''):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = str(self.index) + str(self.timestamp) + str(self.data) + self.previous_hash
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, time.time(), "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_data):
        previous_block = self.get_latest_block()
        new_block = Block(len(self.chain), time.time(), new_data, previous_block.hash)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

# Testing the Simple Blockchain

simple_blockchain = Blockchain()

# Adding some blocks
simple_blockchain.add_block("First block data")
simple_blockchain.add_block("Second block data")
simple_blockchain.add_block("Third block data")

# Print the blockchain
for block in simple_blockchain.chain:
    print(f"Block {block.index}:\nData: {block.data}\nHash: {block.hash}\nPrevious Hash: {block.previous_hash}\n")

# Check blockchain validity
print(f"Is blockchain valid? {simple_blockchain.is_chain_valid()}")
